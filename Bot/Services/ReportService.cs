using FamilyBudgetBot.Bot.Handlers;
using FamilyBudgetBot.Data.Models;
using FamilyBudgetBot.Services;
using System.Globalization;
using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TGBotLog.Data.Models;

namespace TGBotLog.Bot.Services;

public class ReportService
{
    private readonly ITelegramBotClient _bot;
    private readonly BudgetService _budgetService;

    public ReportService(BudgetService budgetService, ITelegramBotClient bot)
    {
        _budgetService = budgetService;
        _bot = bot;
    }

    public async Task GenerateReport(long chatId, int? year = null, int? month = null)
    {
        DateTime startDate, endDate;
        string periodTitle;

        if (year.HasValue && month.HasValue)
        {
            startDate = new DateTime(year.Value, month.Value, 1);
            endDate = startDate.AddMonths(1).AddDays(-1);
            var monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month.Value);
            periodTitle = $"{monthName} {year.Value}";
        }
        else
        {
            startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            endDate = DateTime.Now;
            periodTitle = "–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü";
        }

        var transactions = _budgetService.GetTransactions(startDate, endDate);
        var categories = _budgetService.GetAllCategories();

        if (transactions.Count == 0)
        {
            await _bot.SendTextMessageAsync(chatId, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            return;
        }

        var incomeTransactions = transactions.Where(t => t.Type == TransactionType.Income);
        var expenseTransactions = transactions.Where(t => t.Type == TransactionType.Expense);

        var incomeReport = incomeTransactions
            .GroupBy(t => t.CategoryId)
            .Select(g =>
            {
                var category = categories.FirstOrDefault(c => c.Id == g.Key) ?? new Category();
                return new
                {
                    CategoryId = g.Key,
                    Category = category.Name,
                    Total = g.Sum(t => t.Amount)
                };
            })
            .OrderByDescending(r => r.Total);

        var expenseReport = expenseTransactions
            .GroupBy(t => t.CategoryId)
            .Select(g =>
            {
                var category = categories.FirstOrDefault(c => c.Id == g.Key) ?? new Category();
                return new
                {
                    CategoryId = g.Key,
                    Category = category.Name,
                    Total = g.Sum(t => t.Amount)
                };
            })
            .OrderByDescending(r => r.Total);

        var totalIncome = incomeReport.Sum(r => r.Total);
        var totalExpense = expenseReport.Sum(r => r.Total);
        var balance = totalIncome - totalExpense;

        var message = new StringBuilder();
        message.AppendLine($"üìà <b>–û—Ç—á–µ—Ç –∑–∞ {periodTitle}</b>\n");
        message.AppendLine($"üí∞ <b>–î–æ—Ö–æ–¥—ã:</b> {totalIncome:N0} —Ä—É–±.");
        message.AppendLine($"üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> {totalExpense:N0} —Ä—É–±.");
        message.AppendLine($"üìä <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:N0} —Ä—É–±.\n");

        if (incomeReport.Any())
        {
            message.AppendLine("<b>–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>");
            foreach (var item in incomeReport)
            {
                message.AppendLine($"  {item.Total,7:N0} —Ä—É–±. - {item.Category}");
            }
            message.AppendLine();
        }

        if (expenseReport.Any())
        {
            message.AppendLine("<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>");
            foreach (var item in expenseReport)
            {
                message.AppendLine($"  {item.Total,7:N0} —Ä—É–±. - {item.Category}");
            }
            message.AppendLine();
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        var inlineKeyboard = CreateReportKeyboard(year, month);

        await _bot.SendTextMessageAsync(
            chatId: chatId,
            text: message.ToString(),
            parseMode: ParseMode.Html,
            replyMarkup: inlineKeyboard
        );
    }

    public async Task GenerateDetailedReport(long chatId, int? year = null, int? month = null)
    {
        DateTime startDate, endDate;
        string periodTitle;

        if (year.HasValue && month.HasValue)
        {
            startDate = new DateTime(year.Value, month.Value, 1);
            endDate = startDate.AddMonths(1).AddDays(-1);
            var monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month.Value);
            periodTitle = $"{monthName} {year.Value}";
        }
        else
        {
            startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            endDate = DateTime.Now;
            periodTitle = "–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü";
        }

        var transactions = _budgetService.GetTransactions(startDate, endDate);
        var categories = _budgetService.GetAllCategories();

        if (transactions.Count == 0)
        {
            await _bot.SendTextMessageAsync(chatId, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            return;
        }

        var incomeTransactions = transactions.Where(t => t.Type == TransactionType.Income);
        var expenseTransactions = transactions.Where(t => t.Type == TransactionType.Expense);

        var incomeReport = incomeTransactions
            .GroupBy(t => t.CategoryId)
            .Select(g =>
            {
                var category = categories.FirstOrDefault(c => c.Id == g.Key) ?? new Category();
                return new
                {
                    CategoryId = g.Key,
                    Category = category.Name,
                    Total = g.Sum(t => t.Amount)
                };
            })
            .OrderByDescending(r => r.Total);

        var expenseReport = expenseTransactions
            .GroupBy(t => t.CategoryId)
            .Select(g =>
            {
                var category = categories.FirstOrDefault(c => c.Id == g.Key) ?? new Category();
                return new
                {
                    CategoryId = g.Key,
                    Category = category.Name,
                    Total = g.Sum(t => t.Amount)
                };
            })
            .OrderByDescending(r => r.Total);

        var totalIncome = incomeReport.Sum(r => r.Total);
        var totalExpense = expenseReport.Sum(r => r.Total);
        var balance = totalIncome - totalExpense;

        var message = new StringBuilder();
        message.AppendLine($"üìà <b>–û—Ç—á–µ—Ç –∑–∞ {periodTitle}</b>\n");
        message.AppendLine($"üí∞ <b>–î–æ—Ö–æ–¥—ã:</b> {totalIncome:N0} —Ä—É–±.");
        message.AppendLine($"üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> {totalExpense:N0} —Ä—É–±.");
        message.AppendLine($"üìä <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:N0} —Ä—É–±.\n");
        message.AppendLine("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        var inlineKeyboard = CreateDetailedReportKeyboard(incomeReport, expenseReport, year, month);

        await _bot.SendTextMessageAsync(
            chatId: chatId,
            text: message.ToString(),
            parseMode: ParseMode.Html,
            replyMarkup: inlineKeyboard
        );
    }

    private InlineKeyboardMarkup CreateReportKeyboard(int? year, int? month)
    {
        var detailedCallbackData = $"detailed_report_{year ?? DateTime.Now.Year}_{month ?? DateTime.Now.Month}";

        var buttons = new List<InlineKeyboardButton[]>
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", detailedCallbackData)
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "select_report_period")
            }
        };

        return new InlineKeyboardMarkup(buttons);
    }

    private InlineKeyboardMarkup CreateDetailedReportKeyboard(
        IEnumerable<dynamic> incomeReport,
        IEnumerable<dynamic> expenseReport,
        int? year,
        int? month)
    {
        var buttons = new List<InlineKeyboardButton[]>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        var incomeButtons = new List<InlineKeyboardButton>();
        foreach (var item in incomeReport)
        {
            var callbackData = $"category_details_{year ?? DateTime.Now.Year}_{month ?? DateTime.Now.Month}_{item.CategoryId}";
            incomeButtons.Add(InlineKeyboardButton.WithCallbackData(
                $"üí∞ {item.Category}",
                callbackData));
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        for (int i = 0; i < incomeButtons.Count; i += 2)
        {
            var row = new List<InlineKeyboardButton>();
            row.Add(incomeButtons[i]);
            if (i + 1 < incomeButtons.Count)
                row.Add(incomeButtons[i + 1]);
            buttons.Add(row.ToArray());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
        if (incomeButtons.Any() && expenseReport.Any())
        {
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", "no_action")
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        var expenseButtons = new List<InlineKeyboardButton>();
        foreach (var item in expenseReport)
        {
            var callbackData = $"category_details_{year ?? DateTime.Now.Year}_{month ?? DateTime.Now.Month}_{item.CategoryId}";
            expenseButtons.Add(InlineKeyboardButton.WithCallbackData(
                $"üí∏ {item.Category}",
                callbackData));
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        for (int i = 0; i < expenseButtons.Count; i += 2)
        {
            var row = new List<InlineKeyboardButton>();
            row.Add(expenseButtons[i]);
            if (i + 1 < expenseButtons.Count)
                row.Add(expenseButtons[i + 1]);
            buttons.Add(row.ToArray());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        var backCallbackData = $"back_to_report_{year ?? DateTime.Now.Year}_{month ?? DateTime.Now.Month}";
        buttons.Add(new[]
        {
            InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç—É", backCallbackData),
            InlineKeyboardButton.WithCallbackData("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "select_report_period")
        });

        return new InlineKeyboardMarkup(buttons);
    }

    public async Task ShowCategoryDetails(long chatId, int year, int month, int categoryId)
    {
        var startDate = new DateTime(year, month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);

        var transactions = _budgetService.GetTransactionsByCategoryAndPeriod(categoryId, startDate, endDate);
        var category = _budgetService.GetCategoryById(categoryId);
        var monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);

        if (transactions.Count == 0)
        {
            await _bot.SendTextMessageAsync(chatId, $"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category?.Name}' –∑–∞ {monthName} {year}");
            return;
        }

        var totalAmount = transactions.Sum(t => t.Amount);
        var message = new StringBuilder();

        message.AppendLine($"üìã <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> {category?.Name}");
        message.AppendLine($"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {monthName} {year}");
        message.AppendLine($"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {totalAmount:N0} —Ä—É–±.");
        message.AppendLine($"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {transactions.Count}\n");
        message.AppendLine("<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n");

        foreach (var transaction in transactions.OrderByDescending(t => t.Date))
        {
            var date = transaction.Date.ToString("dd.MM");
            var description = string.IsNullOrEmpty(transaction.Description) ? "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è" : transaction.Description;
            var typeIcon = transaction.Type == TransactionType.Income ? "‚ûï" : "‚ûñ";

            message.AppendLine($"{typeIcon} <code>{date}</code> - {transaction.Amount:N0} —Ä—É–±.");
            message.AppendLine($"   <i>{description}</i>\n");
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        var backButton = InlineKeyboardButton.WithCallbackData(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏",
            $"detailed_report_{year}_{month}"
        );

        var mainReportButton = InlineKeyboardButton.WithCallbackData(
            "üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç",
            $"back_to_report_{year}_{month}"
        );

        var periodButton = InlineKeyboardButton.WithCallbackData(
            "üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥",
            "select_report_period"
        );

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { backButton, mainReportButton },
            new[] { periodButton }
        });

        await _bot.SendTextMessageAsync(
            chatId: chatId,
            text: message.ToString(),
            parseMode: ParseMode.Html,
            replyMarkup: inlineKeyboard
        );
    }
}